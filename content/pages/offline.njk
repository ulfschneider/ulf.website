---
layout: default
permalink: "{{site.cache.offlineUrl}}"
title: ⚡ You´re currently offline
search: false
eleventyExcludeFromCollections: true
---
<p id="we-are-offline"></p>

<script>
    const OFFLINE_URL = {{ page.url }};
    const URLS_TO_IGNORE = [
        new RegExp(OFFLINE_URL + '$'),
        /\/404.*/,
        /\.xml[\/]?$/
    ];

    const WE_ARE_OFFLINE_ID = 'we-are-offline';
    const WE_ARE_OFFLINE = `We can´t connect to <i>${location.hostname}</i> right now, and the page you want to see has not been saved for offline reading.`
    const SOMETHING_IS_CACHED = 'However, these pages <i>have been</i> saved:'

    async function evaluateCacheKeys(cacheName, cachedURLs) {

        await caches
            .open(cacheName)
            .then(async cache => {
                await cache
                    .keys()
                    .then(requests => {
                        requests.forEach(request => {
                            let url = new URL(request.url);
                            if (url.pathname.endsWith('/') && url.hostname == location.hostname) {
                                //i´m only interested in cached pages from my host
                                //and the pages pathname must end with /
                                let ignore = false;
                                for (let pattern of URLS_TO_IGNORE) {
                                    if (pattern.test(url.pathname)) {
                                        ignore = true;
                                        break;
                                    }
                                }
                                if (!ignore) {
                                    cachedURLs.push(new URL(request.url));
                                }
                            }
                        });
                    });
            });

        return cachedURLs;
    }

    async function evaluateCaches() {
        let weAreOffline = document.getElementById(WE_ARE_OFFLINE_ID);
        weAreOffline.innerHTML = WE_ARE_OFFLINE;

        let cachedURLs = [];
        caches
            .keys()
            .then(async cacheNames => {
                for (let name of cacheNames) {
                    await evaluateCacheKeys(name, cachedURLs);
                }
                if (cachedURLs.length) {
                    weAreOffline.innerHTML += ' ';
                    weAreOffline.innerHTML += SOMETHING_IS_CACHED;

                    let history = document.createElement('ul');
                    history.classList = "reset";
                    for (let url of cachedURLs) {
                        history.innerHTML += '<li><a href="' + url + '">' + url.pathname + url.search + '</a></li>';
                    }
                    weAreOffline
                        .parentNode
                        .insertBefore(history, weAreOffline.nextSibling)
                }
            });
    }

    evaluateCaches();
</script>
